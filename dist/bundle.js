!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=64)}([function(e,t,r){"use strict";var n=r(11),o=r(48),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function s(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),a(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),o=r(14),i=r(13),a=r(12),s=function(){function e(){this.callRequestCompletedHandler=this.callRequestCompletedHandler.bind(this),this.callRequestFailHandler=this.callRequestFailHandler.bind(this)}return e.removeEmptyAndNullsJSONReplacer=function(e,t){if(null!=t&&"null"!=t&&""!==t&&void 0!==t)return t},e.getTicket=function(e,t,r){void 0===r&&(r=0);var n=new o.SLTResourceURLTicket(e,t);return r>0&&(n.idleTimeout=r),n},e.prototype.call=function(e,t,r,n){void 0===t&&(t=null),void 0===r&&(r=null),void 0===n&&(n=0),this._params=e,this._successCallback=t,this._failCallback=r;var o=this.validateDefaultWebParams();if(0!=o.isValid){var i=this.buildCall();this.doCall(i,n)}else this.returnValidationFailedResult(o.message)},e.prototype.returnValidationFailedResult=function(e){var t=new i.SLTApiCallResult;t.success=!1,t.status=new n.SLTStatus("API_ERROR",e),this.handleResult(t)},e.prototype.doCall=function(e,t){var r=this.getURLTicket(e,t);new a.SLTResource(r,this.callRequestCompletedHandler,this.callRequestFailHandler).load()},e.prototype.getURLTicket=function(t,r){return e.getTicket(this._url,t,r)},e.prototype.callRequestCompletedHandler=function(e){var t,r=e.data,o=!1,a=new i.SLTApiCallResult;r&&r.hasOwnProperty("response")?(o=(t=r.response[0]).success)?a.data=t:a.status=new n.SLTStatus(t.error.code,t.error.message):a.status=new n.SLTStatus("API_ERROR","unknown API error: wrong response"),a.success=o,this.handleResult(a)},e.prototype.callRequestFailHandler=function(e){var t=new i.SLTApiCallResult;t.status=new n.SLTStatus("API_ERROR","API call request failed."),this.handleResult(t)},e.prototype.buildCall=function(){throw new Error("abstract method call error")},e.prototype.validateDefaultWebParams=function(){return null==this._params.socialId?{isValid:!1,message:"Field socialId is required"}:null==this._params.clientKey?{isValid:!1,message:"Field clientKey is required"}:{isValid:!0}},e.prototype.buildDefaultArgs=function(){var e={};return e.socialId=this._params.socialId,e.apiVersion="1.9.0",e.clientKey=this._params.clientKey,e.client="html5",e.devMode=this._params.devMode,e},e.prototype.handleResult=function(e){e.success?this._successCallback&&this._successCallback(e.data):this._failCallback&&this._failCallback(e.status)},e}();t.SLTApiCall=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.ACTION_GET_APP_DATA="getAppData",e.ACTION_ADD_PROPERTIES="addProperties",e.ACTION_DEV_ADD_LEVELEND_EVENT="addLevelEndEvent",e.ACTION_HEARTBEAT="heartbeat",e.ACTION_LEVEL_REPORT="levelReport",e.SALTR_API_URL="https://api.saltr.com/call",e.SALTR_DEVAPI_URL="https://devapi.saltr.com/call",e.HEARTBEAT_TIMER_DELAY=12e4,e}();t.SLTConfig=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){this._statusCode=e,this._statusMessage=t,console.log("[SALTR] "+t)}return Object.defineProperty(e.prototype,"statusMessage",{get:function(){return this._statusMessage||""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"statusCode",{get:function(){return this._statusCode||""},enumerable:!0,configurable:!0}),e.AUTHORIZATION_ERROR=1001,e.VALIDATION_ERROR=1002,e.API_ERROR=1003,e.PARSE_ERROR=1004,e.REGISTRATION_REQUIRED_ERROR_CODE=2001,e.CLIENT_ERROR_CODE=2002,e.CLIENT_APP_DATA_LOAD_FAIL=2040,e.CLIENT_LEVEL_CONTENT_LOAD_FAIL=2041,e.CLIENT_APP_DATA_CONCURRENT_LOAD_REFUSED=2042,e.CLIENT_FEATURES_PARSE_ERROR=2050,e.CLIENT_EXPERIMENTS_PARSE_ERROR=2051,e.CLIENT_BOARD_PARSE_ERROR=2052,e.CLIENT_APP_DATA_PARSE_ERROR=2053,e.CLIENT_LEVELS_PARSE_ERROR=2054,e}();t.SLTStatus=n},function(e,t,r){"use strict";(function(t){var n=r(0),o=r(45),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:("undefined"!=typeof XMLHttpRequest?s=r(10):void 0!==t&&(s=r(10)),s),transformRequest:[function(e,t){return o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],function(e){u.headers[e]={}}),n.forEach(["post","put","patch"],function(e){u.headers[e]=n.merge(i)}),e.exports=u}).call(this,r(46))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.TIMER="timer",e.TIMER_COMPLETE="timerComplete",e}();t.TimerEvent=n},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(){return e.call(this,"CLIENT_APP_DATA_LOAD_FAIL","[SALTR] Failed to load appData")||this}return o(t,e),t}(r(3).SLTStatus);t.SLTStatusAppDataLoadFail=i},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";var n=r(43);e.exports=function(e,t,r,o,i){var a=new Error(e);return n(a,t,r,o,i)}},function(e,t,r){"use strict";var n=r(0),o=r(44),i=r(42),a=r(41),s=r(40),u=r(9),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||r(39);e.exports=function(e){return new Promise(function(t,l){var p=e.data,f=e.headers;n.isFormData(p)&&delete f["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",_=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||s(e.url)||(d=new window.XDomainRequest,h="onload",_=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var y=e.auth.username||"",b=e.auth.password||"";f.Authorization="Basic "+c(y+":"+b)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||_)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:r,config:e,request:d};o(t,l,n),d=null}},d.onerror=function(){l(u("Network Error",e,null,d)),d=null},d.ontimeout=function(){l(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},n.isStandardBrowserEnv()){var v=r(38),g=(e.withCredentials||s(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;g&&(f[e.xsrfHeaderName]=g)}if("setRequestHeader"in d&&n.forEach(f,function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete f[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),l(e),d=null)}),void 0===p&&(p=null),d.send(p)})}},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=this&&this.__assign||Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var o=r(50),i=r(30),a=function(){function e(e,t,r){this._ticket=e,this._onSuccess=t,this._onFail=r,this._maxAttempts=this._ticket.maxAttempts,this._fails=0}return Object.defineProperty(e.prototype,"data",{get:function(){return this._data||""},enumerable:!0,configurable:!0}),e.prototype.load=function(){var e=this,t=this._ticket.getURLRequest(),r={url:t.url,method:t.method,responseType:"json"};if("GET"!==t.method){var a=new i;Object.keys(t.form).forEach(function(e){a.append(e,t.form[e])}),r=n({},r,{data:a,headers:a.getHeaders()})}o.default.request(r).then(function(t){e.completeHandler(t.data)}).catch(function(){e.loadFailed()})},e.prototype.completeHandler=function(e){this._data=e,this._onSuccess(this)},e.prototype.loadFailed=function(){this._fails++,this._fails==this._maxAttempts?this._onFail.call(null,this):this.load()},e}();t.SLTResource=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return Object.defineProperty(e.prototype,"success",{get:function(){return this._success},set:function(e){this._success=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"status",{get:function(){return this._status},set:function(e){this._status=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"data",{get:function(){return this._data},set:function(e){this._data=e},enumerable:!0,configurable:!0}),e}();t.SLTApiCallResult=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(52),o=r(51),i=function(){function e(e,t){void 0===t&&(t=null),this._authenticate=!0,this._cacheResponse=!0,this._followRedirects=!0,this._manageCookies=!0,this._useCache=!0,this._idleTimeout=3e3,this._userAgent=null,this._url=e,this._variables=t,this._method=t.method,this._requestHeaders=[],this._checkPolicy=!1,this._maxAttempts=3,this._useSameDomain=!0,this._dropTimeout=0,this._timeoutIncrease=0}return e.prototype.getURLRequest=function(){var e=new o.URLRequest;return e.url=this._url,e.json=!0,this.method?e.method=this.method:(e.form=this._variables,e.method="POST"),e},e.prototype.addHeader=function(e,t){this._requestHeaders.push(new n.URLRequestHeader(e,t))},e.prototype.getHeaderValue=function(e){for(var t=this._requestHeaders.length-1;t>=0;t--){var r=this._requestHeaders[t];if(r.name==e)return r.value}return null},Object.defineProperty(e.prototype,"authenticate",{get:function(){return this._authenticate||!1},set:function(e){this._authenticate=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cacheResponse",{get:function(){return this._cacheResponse||!1},set:function(e){this._cacheResponse=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this._contentType||""},set:function(e){this._contentType=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"variables",{get:function(){return this._variables},set:function(e){this._variables=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"followRedirects",{get:function(){return this._followRedirects||!1},set:function(e){this._followRedirects=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"idleTimeout",{get:function(){return this._idleTimeout||0},set:function(e){this._idleTimeout=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"manageCookies",{get:function(){return this._manageCookies||!1},set:function(e){this._manageCookies=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"method",{get:function(){return this._method},set:function(e){this._method=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"requestHeaders",{get:function(){return this._requestHeaders},set:function(e){this._requestHeaders=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"url",{get:function(){return this._url||""},set:function(e){this._url=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useCache",{get:function(){return this._useCache||!1},set:function(e){this._useCache=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"userAgent",{get:function(){return this._userAgent||""},set:function(e){this._userAgent=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maxAttempts",{get:function(){return this._maxAttempts||0},set:function(e){this._maxAttempts=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"checkPolicy",{get:function(){return this._checkPolicy||!1},set:function(e){this._checkPolicy=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"useSameDomain",{get:function(){return this._useSameDomain||!1},set:function(e){this._useSameDomain=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropTimeout",{get:function(){return this._dropTimeout||0},set:function(e){this._dropTimeout=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"timeoutIncrease",{get:function(){return this._timeoutIncrease||0},set:function(e){this._timeoutIncrease=e},enumerable:!0,configurable:!0}),e}();t.SLTResourceURLTicket=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,r){this._properties=e,this._stateMap=t,this._token=r}return Object.defineProperty(e.prototype,"properties",{get:function(){return this._properties},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"token",{get:function(){return this._token},enumerable:!0,configurable:!0}),e.prototype.getInstanceState=function(e){return this._stateMap[e]},e.prototype.toString=function(){return"[Asset] token: "+this._token+",  properties: "+this._properties},e}();t.SLTAsset=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,r,n){this._propertyObjects=r,this._layers=t,this._checkpoints=n,this._token=e}return Object.defineProperty(e.prototype,"propertyObjects",{get:function(){return this._propertyObjects},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"layers",{get:function(){return this._layers},enumerable:!0,configurable:!0}),e.prototype.getLayerByToken=function(e){return this._layers[e]},e.prototype.getCheckpoint=function(e){return this._checkpoints[e]},e.prototype.getCheckpoints=function(){var e=[];for(var t in this._checkpoints)e.push(this._checkpoints[t]);return e},e.prototype.regenerate=function(){throw new Error("Virtual function call: regenerate")},Object.defineProperty(e.prototype,"token",{get:function(){return this._token},enumerable:!0,configurable:!0}),e.BOARD_TYPE_MATCHING="matrix",e.BOARD_TYPE_CANVAS_2D="canvas2d",e}();t.SLTBoard=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(61),o=r(18),i=r(60),a=r(56),s=r(55),u=function(){function e(){}return e.sortByIndex=function(e,t){return e.index-t.index},e.decodeExperiments=function(e){var t=[],r=e.experiments;if(null!=r)for(var o=0;o<r.length;++o){var i=r[o],a=i.token,s=i.partition,u=i.type,c=i.customEventList;t.push(new n.SLTExperiment(a,s,u,c))}return t},e.decodeAndUpdateExistingLevels=function(e,t){for(var r=e.levels,n=0,o=Math.min(t.length,r.length);n<o;++n){var i=r[n];t[i.globalIndex].update(i.version,i.url)}return t},e.decodeAndCreateNewLevels=function(e){for(var t=e.levels,r=[],n=0,o=t.length;n<o;++n){var a=t[n],s=new i.SLTLevel(a.globalIndex,a.localIndex,a.packIndex,a.url,a.levelToken,a.packToken,a.version);r.push(s)}return r},e.decodeAndInitFeatures=function(e,t){var r=e.features;if(null!=r)for(var n=0,i=r.length;n<i;++n){var u=r[n],c=u.token,l=u.type,p=u.version,f=u.required,d=JSON.parse(u.properties);switch(l){case a.SLTFeatureType.GENERIC:t[c]=new o.SLTFeature(c,l,p,d,f);break;case a.SLTFeatureType.LEVEL_COLLECTION:t[c]=new o.SLTFeature(c,l,p,new s.SLTLevelCollectionBody(d),f);break;default:console.log("SALTR parsing unknown feature type.")}}return t},e.decodeAndUpdateFeatures=function(e,t){var r=e.features;if(null!=r){for(var n={},o=0;o<r.length;++o){var i=r[o];n[i.token]=i}for(var s in t){var u=t[s],c=u.token,l=u.type,p=n[c];if(null!=p){var f=p.version;if(u.disabled=!1,u.version!=f)switch(l){case a.SLTFeatureType.GENERIC:u.update(f,JSON.parse(p.properties));break;case a.SLTFeatureType.LEVEL_COLLECTION:u.body.updateLevels(JSON.parse(p.properties)),u.update(f);break;default:console.log("SALTR parsing unknown feature type.")}}else 0==u.isRequired&&(u.disabled=!0)}}return t},e}();t.SLTDeserializer=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,r,n,o){void 0===n&&(n=null),void 0===o&&(o=!1),this._token=e,this._type=t,this._body=n,this._isRequired=o,this._version=r,this._disabled=!1}return Object.defineProperty(e.prototype,"token",{get:function(){return this._token},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"body",{get:function(){return this._body},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isRequired",{get:function(){return this._isRequired},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"disabled",{get:function(){return this._disabled},set:function(e){this._disabled=!this._isRequired&&e},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return"[SALTR] Feature { token : "+this._token+", value : "+this._body+"}"},e.prototype.update=function(e,t){void 0===t&&(t=null),this._version=e,null!=t&&(this._body=t)},e}();t.SLTFeature=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this._isDebug=!1,this._verboseLogging=!1}return e.getInstance=function(){return this.INSTANCE||(this.INSTANCE=new e),this.INSTANCE},Object.defineProperty(e.prototype,"debug",{set:function(e){this._isDebug=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"verboseLogging",{set:function(e){this._verboseLogging=e},enumerable:!0,configurable:!0}),e.prototype.log=function(e){this._isDebug&&this._verboseLogging&&console.log("[SALTR]: "+e)},e}();t.SLTLogger=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.NORMAL="normal",e.FORCED="forced",e}();t.SLTContext=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(5),o=function(){function e(e,t){void 0===t&&(t=0),this._delay=e||1e3,this._running=!1,this._timer=null,this._repeatCount=t,this._currentCount=0,this._notifications={}}return e.prototype.start=function(){this._running||(this._running=!0,this.tick())},e.prototype.stop=function(){this._running&&(this._running=!1,clearTimeout(this._timer),this._timer=null,this.dispatchEvent(n.TimerEvent.TIMER_COMPLETE))},e.prototype.reset=function(){this.stop(),this._currentCount=0},e.prototype.tick=function(){this._running&&(this._currentCount++,this.dispatchEvent(n.TimerEvent.TIMER),this._currentCount==this._repeatCount?this.stop():(clearTimeout(this._timer),this._timer=setTimeout(this.tick.bind(this),this._delay)))},e.prototype.addEventListener=function(e,t,r){void 0===r&&(r=null);var n=this._notifications[e]||[];n.push({callback:t,thisArg:r}),this._notifications[e]=n},e.prototype.removeEventListener=function(e,t,r){void 0===r&&(r=null);var n=this._notifications[e];if(n){var o=-1;n.forEach(function(e,n){e.callback==t&&e.thisArg==r&&(o=n)}),-1!==o&&n.splice(o,1)}},e.prototype.dispatchEvent=function(e){this._notifications[e]&&this._notifications[e].forEach(function(e){e.callback.call(e.thisArg)})},Object.defineProperty(e.prototype,"running",{get:function(){return this._running||!1},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentCount",{get:function(){return this._currentCount||0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"delay",{get:function(){return this._delay||0},set:function(e){this._delay=e},enumerable:!0,configurable:!0}),e}();t.Timer=o},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(){return e.call(this,"CLIENT_APP_DATA_CONCURRENT_LOAD_REFUSED","[SALTR] appData load refused. Previous load is not complete")||this}return o(t,e),t}(r(3).SLTStatus);t.SLTStatusAppDataConcurrentLoadRefused=i},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(1),a=r(2),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.buildCall=function(){this._url=a.SLTConfig.SALTR_DEVAPI_URL;var e={};e.action=a.SLTConfig.ACTION_LEVEL_REPORT;var t=this.buildDefaultArgs();return t.levelReportEventProperties=this._params.levelReportEventProperties,e.args=JSON.stringify(t,i.SLTApiCall.removeEmptyAndNullsJSONReplacer),t},t}(i.SLTApiCall);t.SLTLevelReportApiCall=s},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(1),a=r(2),s=function(e){function t(){return e.call(this)||this}return o(t,e),t.prototype.buildCall=function(){this._url=a.SLTConfig.SALTR_DEVAPI_URL;var e={};e.action=a.SLTConfig.ACTION_DEV_ADD_LEVELEND_EVENT;var t=this.buildDefaultArgs();t.variationId=this._params.variationId;var r={};return r.endReason=this._params.endReason,r.endStatus=this._params.endStatus,r.score=this._params.score,this.addLevelEndEventProperties(r,this._params.customNumbericProperties,this._params.customTextProperties),t.eventProps=r,e.args=JSON.stringify(t,i.SLTApiCall.removeEmptyAndNullsJSONReplacer),e},t.prototype.addLevelEndEventProperties=function(e,t,r){for(var n=0,o=t.length;n<o;n++){e["cD"+(n+1)]=t[n]}var i=0;for(r.length;i<length;i++){e["cT"+(i+1)]=r[i]}return e},t}(i.SLTApiCall);t.SLTSendLevelEndEventApiCall=s},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(1),a=r(14),s=r(12),u=r(13),c=function(e){function t(){return e.call(this)||this}return o(t,e),t.prototype.validateDefaultWebParams=function(){var e=this._params.contentUrl;return null==e||""==e?{isValid:!1,message:"Missing contentUrl."}:{isValid:!0}},t.prototype.buildCall=function(){return this._url=this._params.contentUrl,this._alternateUrl=this._params.alternateUrl,{method:"GET"}},t.prototype.getURLTicket=function(e,t){return i.SLTApiCall.getTicket(this._url,e,t)},t.prototype.callRequestCompletedHandler=function(e){var t=e.data,r=new u.SLTApiCallResult;r.success=null!=t&&void 0!=t,r.data=t,this.handleResult(r)},t.prototype.callRequestFailHandler=function(e){if(this._alternateUrl){var t=new a.SLTResourceURLTicket(this._alternateUrl);new s.SLTResource(t,this.alternateCallRequestCompletedHandler,this.alternateCallRequestFailHandler).load()}else this.alternateCallRequestFailHandler(e)},t.prototype.alternateCallRequestCompletedHandler=function(e){this.callRequestCompletedHandler(e)},t.prototype.alternateCallRequestFailHandler=function(t){e.prototype.callRequestFailHandler.call(this,t)},t}(i.SLTApiCall);t.SLTLevelContentApiCall=c},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(1),a=r(2),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.buildCall=function(){this._url=a.SLTConfig.SALTR_API_URL;var e={};e.action=a.SLTConfig.ACTION_HEARTBEAT;var t=this.buildDefaultArgs();return e.args=JSON.stringify(t,i.SLTApiCall.removeEmptyAndNullsJSONReplacer),e},t}(i.SLTApiCall);t.SLTHeartbeatApiCall=s},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(){return e.call(this,"CLIENT_APP_DATA_PARSE_ERROR","[SALTR] Failed to decode appData.")||this}return o(t,e),t}(r(3).SLTStatus);t.SLTStatusAppDataParseError=i},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(1),a=r(2),s=function(e){function t(t){var r=e.call(this)||this;return r._appData=t,r}return o(t,e),t.prototype.buildCall=function(){this._url=a.SLTConfig.SALTR_API_URL;var e={};e.action=a.SLTConfig.ACTION_GET_APP_DATA;var t=this.buildDefaultArgs();return t.ping=this._params.ping,t.snapshotId=this._params.snapshotId,t.basicProperties=this._params.basicProperties,t.customProperties=this._params.customProperties,e.args=JSON.stringify(t,i.SLTApiCall.removeEmptyAndNullsJSONReplacer),e},t}(i.SLTApiCall);t.SLTAppDataApiCall=s},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(28),a=r(19),s=r(27),u=r(6),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.call=function(t,r,n,o,i){void 0===r&&(r=null),void 0===n&&(n=null),void 0===o&&(o=0),void 0===i&&(i=0),e.prototype.call.call(this,t,this.wrappedSuccessCallback,this.wrappedFailCallback,i),this._originalFailCallback=n,this._originalSuccessCallback=r},t.prototype.wrappedSuccessCallback=function(e){a.SLTLogger.getInstance().log("New app data request from connect() succeed."),this.processNewAppData(e)?this._originalSuccessCallback(this._appData):this._originalFailCallback(new s.SLTStatusAppDataParseError)},t.prototype.wrappedFailCallback=function(e){a.SLTLogger.getInstance().log("New app data request from connect() failed. StatusCode: "+e.statusCode),"API_ERROR"==e.statusCode?this._originalFailCallback(new u.SLTStatusAppDataLoadFail):this._originalFailCallback(e)},t.prototype.processNewAppData=function(e){try{this._appData.initWithData(e)}catch(e){return a.SLTLogger.getInstance().log("New app data process failed."),!1}return a.SLTLogger.getInstance().log("New app data processed."),!0},t}(i.SLTAppDataApiCall);t.SLTWebAppDataApiCall=c},function(e,t){e.exports="object"==typeof self?self.FormData:window.FormData},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";var n=r(7);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var r=this;e(function(e){r.reason||(r.reason=new n(e),t(r.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t,r){return n.forEach(r,function(r){e=r(e,t)}),e}},function(e,t,r){"use strict";var n=r(0),o=r(35),i=r(8),a=r(4),s=r(34),u=r(33);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,r){"use strict";var n=r(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&s.push("expires="+new Date(r).toGMTString()),n.isString(o)&&s.push("path="+o),n.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,r,i=String(e),a="",s=0,u=n;i.charAt(0|s)||(u="=",s%1);a+=u.charAt(63&t>>8-s%1*8)){if((r=i.charCodeAt(s+=.75))>255)throw new o;t=t<<8|r}return a}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n=r(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,i,a={};return e?(n.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([r]):a[t]?a[t]+", "+r:r}}),a):a}},function(e,t,r){"use strict";var n=r(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(n.isURLSearchParams(t))i=t.toString();else{var a=[];n.forEach(t,function(e,t){null!==e&&void 0!==e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e}},function(e,t,r){"use strict";var n=r(9);e.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t){n.forEach(e,function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])})}},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var u,c=[],l=!1,p=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):p=-1,c.length&&d())}function d(){if(!l){var e=s(f);l=!0;for(var t=c.length;t;){for(u=c,c=[];++p<t;)u&&u[p].run();p=-1,t=c.length}u=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function _(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new h(e,t)),1!==c.length||l||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=_,o.addListener=_,o.once=_,o.off=_,o.removeListener=_,o.removeAllListeners=_,o.emit=_,o.prependListener=_,o.prependOnceListener=_,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";var n=r(4),o=r(0),i=r(37),a=r(36);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(n,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)r=r.then(t.shift(),t.shift());return r},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,r){return this.request(o.merge(r||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,r,n){return this.request(o.merge(n||{},{method:e,url:t,data:r}))}}),e.exports=s},function(e,t){function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,r){"use strict";var n=r(0),o=r(11),i=r(47),a=r(4);function s(e){var t=new i(e),r=o(i.prototype.request,t);return n.extend(r,i.prototype,t),n.extend(r,t),r}var u=s(a);u.Axios=i,u.create=function(e){return s(n.merge(a,e))},u.Cancel=r(7),u.CancelToken=r(32),u.isCancel=r(8),u.all=function(e){return Promise.all(e)},u.spread=r(31),e.exports=u,e.exports.default=u},function(e,t,r){e.exports=r(49)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return Object.defineProperty(e.prototype,"url",{get:function(){return this._url},set:function(e){this._url=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"form",{get:function(){return this._form},set:function(e){this._form=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"json",{get:function(){return this._json},set:function(e){this._json=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"method",{get:function(){return this._method},set:function(e){this._method=e},enumerable:!0,configurable:!0}),e}();t.URLRequest=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){this._name=e,this._value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this._value},enumerable:!0,configurable:!0}),e}();t.URLRequestHeader=n},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(1),a=r(2),s=function(e){function t(){return e.call(this)||this}return o(t,e),t.prototype.buildCall=function(){this._url=a.SLTConfig.SALTR_API_URL;var e={};e.action=a.SLTConfig.ACTION_ADD_PROPERTIES;var t=this.buildDefaultArgs();return t.basicProperties=this._params.basicProperties,t.customProperties=this._params.customProperties,e.args=JSON.stringify(t,i.SLTApiCall.removeEmptyAndNullsJSONReplacer),e},t}(i.SLTApiCall);t.SLTAddPropertiesApiCall=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(53),o=r(29),i=r(26),a=r(25),s=r(24),u=r(23),c=function(){function e(){}return e.getCall=function(t,r){switch(void 0===r&&(r=null),t){case e.API_CALL_ADD_PROPERTIES:return new n.SLTAddPropertiesApiCall;case e.API_CALL_APP_DATA:return new o.SLTWebAppDataApiCall(r);case e.API_CALL_HEARTBEAT:return new i.SLTHeartbeatApiCall;case e.API_CALL_LEVEL_CONTENT:return new a.SLTLevelContentApiCall;case e.API_CALL_SEND_LEVEL_END:return new s.SLTSendLevelEndEventApiCall;case e.API_CALL_LEVEL_REPORT:return new u.SLTLevelReportApiCall;default:throw new Error("Unknown call API name.")}},e.API_CALL_ADD_PROPERTIES="AddProperties",e.API_CALL_APP_DATA="AppData",e.API_CALL_HEARTBEAT="Heartbeat",e.API_CALL_LEVEL_REPORT="LevelReport",e.API_CALL_LEVEL_CONTENT="LevelContent",e.API_CALL_SEND_LEVEL_END="SendLevelEnd",e}();t.SLTApiCallFactory=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(17),o=function(){function e(e){this._levels=n.SLTDeserializer.decodeAndCreateNewLevels(e),this.sortLevel()}return Object.defineProperty(e.prototype,"allLevels",{get:function(){return this._levels},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"allLevelsCount",{get:function(){return this._levels.length},enumerable:!0,configurable:!0}),e.prototype.updateLevels=function(e){n.SLTDeserializer.decodeAndUpdateExistingLevels(e,this._levels)},e.prototype.getLevelByToken=function(e){for(var t=0;t<this._levels.length;++t){var r=this._levels[t];if(e==r.levelToken)return r}return null},e.prototype.getLevelByGlobalIndex=function(e){if(e<0||e>=this._levels.length)return null;for(var t=0;t<this._levels.length;++t){var r=this._levels[t];if(e==r.globalIndex)return r}return null},e.prototype.sortLevel=function(){this._levels.sort(function(e,t){return e.globalIndex-t.globalIndex})},e.prototype.disposeLevels=function(){this._levels.length=0},e}();t.SLTLevelCollectionBody=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.GENERIC="generic",e.LEVEL_COLLECTION="levelCollection",e}();t.SLTFeatureType=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){this._x=e,this._y=t}return Object.defineProperty(e.prototype,"x",{get:function(){return this._x},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},enumerable:!0,configurable:!0}),e}();t.Point=n},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(15),a=r(57),s=function(e){function t(t,r,n,o,i){var s=e.call(this,t,o,i)||this;return s._cells=r,s._startPoint=new a.Point(n[0],n[1]),s}return o(t,e),Object.defineProperty(t.prototype,"cells",{get:function(){return this._cells},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"startPoint",{get:function(){return this._startPoint},enumerable:!0,configurable:!0}),t}(i.SLTAsset);t.SLTMultiCellAsset=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(15),o=r(16),i=r(58),a=function(){function e(){}return e.getInstance=function(){return this.INSTANCE||(this.INSTANCE=new e),this.INSTANCE},e.prototype.parseLevelProperties=function(t){if(t.hasOwnProperty(e.NODE_PROPERTY_OBJECTS)){var r={},n=t[e.NODE_PROPERTY_OBJECTS];for(var o in n)n.hasOwnProperty(o)&&(r[o]=n[o]);return r}return null},e.prototype.parseBoardContent=function(e,t,r){return this.getBoardParser(r).parseBoardContent(e,t)},e.prototype.parseAssets=function(e,t){var r=null;if(e.assets.hasOwnProperty(t)){var n=e.assets[t];for(var o in r={},n)n.hasOwnProperty(o)&&(r[o]=this.parseAsset(n[o],t))}return r},e.prototype.parseAsset=function(e,t){var r,o,a=null;return e.hasOwnProperty("token")&&(r=e.token),e.hasOwnProperty("states")&&(o=this.parseAssetStates(e.states,t)),e.hasOwnProperty("properties")&&(a=e.properties),e.hasOwnProperty("startPoint")?new i.SLTMultiCellAsset(r,e.cells,e.startPoint,o,a):new n.SLTAsset(r,o,a)},e.prototype.parseAssetStates=function(e,t){var r={};for(var n in e)e.hasOwnProperty(n)&&(r[n]=this.parseAssetState(e[n],t));return r},e.prototype.parseAssetState=function(e,t){return this.getBoardParser(t).parseAssetState(e)},e.prototype.getBoardParser=function(e){if(o.SLTBoard.BOARD_TYPE_MATCHING==e)return this._matchingBoardParser;if(o.SLTBoard.BOARD_TYPE_CANVAS_2D==e)return this._canvas2dBoardParser;throw new Error("Board parser missing error")},e.NODE_PROPERTY_OBJECTS="propertyObjects",e}();t.SLTLevelParser=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(16),o=r(59),i=function(){function e(e,t,r,n,i,a,s){this._globalIndex=e,this._localIndex=t,this._packIndex=r,this._contentUrl=n,this._defaultContentUrl=n,this._levelToken=i,this._packToken=a,this._version=s,this._defaultVersion=s,this._contentReady=!1,this._parser=o.SLTLevelParser.getInstance()}return Object.defineProperty(e.prototype,"globalIndex",{get:function(){return this._globalIndex||0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"localIndex",{get:function(){return this._localIndex||0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this._properties},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentUrl",{get:function(){return this._contentUrl||""},set:function(e){this._contentUrl=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"defaultContentUrl",{get:function(){return this._defaultContentUrl},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"levelToken",{get:function(){return this._levelToken},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"packToken",{get:function(){return this._packToken},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"defaultVersion",{get:function(){return this._defaultVersion},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentReady",{get:function(){return this._contentReady||!1},set:function(e){this._contentReady=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version||""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"packIndex",{get:function(){return this._packIndex||0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"matrixBoards",{get:function(){return this._matrixBoards},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"canvas2DBoards",{get:function(){return this._canvas2DBoards},enumerable:!0,configurable:!0}),e.prototype.getMatrixBoard=function(e){return null!=this._matrixBoards?this._matrixBoards[e]:null},e.prototype.getCanvas2DBoard=function(e){return null!=this._canvas2DBoards?this._canvas2DBoards[e]:null},e.prototype.update=function(e,t){this._contentUrl=t,this._version=e,this._contentReady=!1},e.prototype.updateContent=function(e){var t,r;this._properties=this._parser.parseLevelProperties(e);try{t=this._parser.parseAssets(e,n.SLTBoard.BOARD_TYPE_MATCHING),r=this._parser.parseAssets(e,n.SLTBoard.BOARD_TYPE_CANVAS_2D)}catch(e){throw new Error("[SALTR: ERROR] Level content asset parsing failed.")}try{this._matrixBoards=this._parser.parseBoardContent(e,t,n.SLTBoard.BOARD_TYPE_MATCHING),this._canvas2DBoards=this._parser.parseBoardContent(e,r,n.SLTBoard.BOARD_TYPE_CANVAS_2D)}catch(e){throw new Error("[SALTR: ERROR] Level content boards parsing failed.")}this.regenerateAllBoards(),this._contentReady=!0},e.prototype.clearContent=function(){this._properties=null,this._matrixBoards=null,this._canvas2DBoards=null,this._contentReady=!1},e.prototype.regenerateAllBoards=function(){if(null!=this._matrixBoards)for(var e in this._matrixBoards)this.regenerateBoard(n.SLTBoard.BOARD_TYPE_MATCHING,e);if(null!=this._canvas2DBoards)for(var t in this._canvas2DBoards)this.regenerateBoard(n.SLTBoard.BOARD_TYPE_CANVAS_2D,t)},e.prototype.regenerateBoard=function(e,t){var r=this.getBoard(e,t);null!=r&&r.regenerate()},e.prototype.getBoard=function(e,t){return e==n.SLTBoard.BOARD_TYPE_MATCHING?this.getMatrixBoard(t):e==n.SLTBoard.BOARD_TYPE_CANVAS_2D?this.getCanvas2DBoard(t):null},e.LEVEL_TYPE_NONE="noLevels",e}();t.SLTLevel=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,r,n){this._token=e,this._partition=t,this._type=r,this._customEvents=n}return Object.defineProperty(e.prototype,"partition",{get:function(){return this._partition||""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"token",{get:function(){return this._token||""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type||""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"customEvents",{get:function(){return this._customEvents},enumerable:!0,configurable:!0}),e.TYPE_FEATURE="FEATURE",e.TYPE_LEVEL_PACK="LEVEL_PACK",e}();t.SLTExperiment=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(18),o=r(17),i=function(){function e(){this._activeFeatures={},this._experiments=[]}return Object.defineProperty(e.prototype,"experiments",{get:function(){return this._experiments},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activeFeatures",{get:function(){return this._activeFeatures},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"snapshotId",{get:function(){return this._snapshotId},enumerable:!0,configurable:!0}),e.prototype.getFeatureBody=function(e){var t=this._activeFeatures[e];return t&&!t.disabled?t.body:null},e.prototype.getLevelCollectionBody=function(e){var t=this._activeFeatures[e];return null!=t?t.body:null},e.prototype.defineFeature=function(e,t,r,o){this._activeFeatures[e]=new n.SLTFeature(e,r,t,o)},e.prototype.initWithData=function(e){this._activeFeatures=o.SLTDeserializer.decodeAndUpdateFeatures(e,this._activeFeatures),this._experiments=o.SLTDeserializer.decodeExperiments(e)},e}();t.SLTAppData=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(19),o=r(2),i=r(62),a=r(54),s=r(22),u=r(6),c=r(21),l=r(5),p=r(20),f=function(){function e(e,t){void 0===t&&(t=null),this._clientKey=e,this._socialId=t,this._heartBeatTimerStarted=!1,this._devMode=!1,this._nativeTimeout=0,this._dropTimeout=0,this._timeoutIncrease=0,this._logger=n.SLTLogger.getInstance(),this._appData=new i.SLTAppData,this.appDataConnectSuccessHandler=this.appDataConnectSuccessHandler.bind(this),this.appDataConnectFailHandler=this.appDataConnectFailHandler.bind(this),this.heartbeatTimerHandler=this.heartbeatTimerHandler.bind(this)}return Object.defineProperty(e.prototype,"devMode",{set:function(e){this._devMode=e,this._logger.debug=this._devMode},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"verboseLogging",{set:function(e){this._logger.verboseLogging=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nativeTimeout",{set:function(e){this._nativeTimeout=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dropTimeout",{set:function(e){this._dropTimeout=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"timeoutIncrease",{set:function(e){this._timeoutIncrease=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"experiments",{get:function(){return this._appData.experiments},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"socialId",{set:function(e){this._socialId=e},enumerable:!0,configurable:!0}),e.prototype.getFeatureBody=function(e){return this._appData.getFeatureBody(e)},e.prototype.getLevelCollectionFeatureBody=function(e){return this._appData.getLevelCollectionBody(e)},e.prototype.canGetAppData=function(){return!this._isWaitingForAppData},e.prototype.initLevelContent=function(e,t,r){t.contentReady=!1,this.initLevelContentFromSaltr(e,t,r)},e.prototype.clearLevelContent=function(e){e.clearContent()},e.prototype.initLevelContentFromSaltr=function(e,t,r){var n={contentUrl:t.contentUrl,alternateUrl:t.defaultContentUrl};a.SLTApiCallFactory.getCall(a.SLTApiCallFactory.API_CALL_LEVEL_CONTENT).call(n,this.levelContentLoadSuccessCallback.bind(this),this.levelContentLoadFailCallback.bind(this),this._dropTimeout)},e.prototype.levelContentLoadSuccessCallback=function(e){this._sltLevel.updateContent(e),this._callback(!0)},e.prototype.levelContentLoadFailCallback=function(e){this._callback(!1)},e.prototype.sendLevelReport=function(e,t,r){var n={clientKey:this._clientKey,socialId:this._socialId,levelReportEventProperties:r};a.SLTApiCallFactory.getCall(a.SLTApiCallFactory.API_CALL_LEVEL_REPORT).call(n,e,t,this._dropTimeout)},e.prototype.connect=function(e,t,r,o){void 0===o&&(o=null),n.SLTLogger.getInstance().log("Method 'connect()' called."),this.canGetAppData()?(this._connectSuccessCallback=e,this._connectFailCallback=t,this._customProperties=o,this._basicProperties=r,this.getAppData(this.appDataConnectSuccessHandler,this.appDataConnectFailHandler,!1,this._basicProperties,this._customProperties)):(n.SLTLogger.getInstance().log("Connect failed. Concurrent load accrues."),t(new s.SLTStatusAppDataConcurrentLoadRefused))},e.prototype.addProperties=function(e,t){if(void 0===e&&(e=null),void 0===t&&(t=null),e||t){var r={clientKey:this._clientKey,socialId:this._socialId,basicProperties:e,customProperties:t};a.SLTApiCallFactory.getCall(a.SLTApiCallFactory.API_CALL_ADD_PROPERTIES).call(r,this.addPropertiesSuccessHandler,this.addPropertiesFailHandler,this._dropTimeout)}},e.prototype.addPropertiesSuccessHandler=function(e){console.log("[SALTR] addPropertiesApiCallback() - succeeded.")},e.prototype.addPropertiesFailHandler=function(e){console.log("[SALTR] addPropertiesApiCallback() - failed.")},e.prototype.sendLevelEndSuccessHandler=function(e){console.log("[SALTR] sendLevelEndSuccessHandler() - succeeded.")},e.prototype.sendLevelEndFailHandler=function(e){console.log("[SALTR] sendLevelEndFailHandler() - failed.")},e.prototype.sendLevelEndEvent=function(e,t,r,n,o,i){var s={clientKey:this._clientKey,devMode:this._devMode,constiationId:e,socialId:this._socialId,endReason:r,endStatus:t,score:n,customNumbericProperties:i,customTextProperties:o};a.SLTApiCallFactory.getCall(a.SLTApiCallFactory.API_CALL_SEND_LEVEL_END).call(s,this.sendLevelEndSuccessHandler,this.sendLevelEndFailHandler)},e.prototype.startHeartbeat=function(){this.stopHeartbeat(),this._heartbeatTimer=new c.Timer(o.SLTConfig.HEARTBEAT_TIMER_DELAY),this._heartbeatTimer.addEventListener(l.TimerEvent.TIMER,this.heartbeatTimerHandler),this._heartbeatTimer.start(),this._heartBeatTimerStarted=!0},e.prototype.stopHeartbeat=function(){null!=this._heartbeatTimer&&(this._heartbeatTimer.stop(),this._heartbeatTimer.removeEventListener(l.TimerEvent.TIMER,this.heartbeatTimerHandler),this._heartbeatTimer=null),this._heartBeatTimerStarted=!1},e.prototype.heartbeatTimerHandler=function(e){var t={clientKey:this._clientKey,devMode:this._devMode,socialId:this._socialId};a.SLTApiCallFactory.getCall(a.SLTApiCallFactory.API_CALL_HEARTBEAT).call(t,null,this.heartbeatFailHandler)},e.prototype.heartbeatFailHandler=function(e){this.stopHeartbeat()},e.prototype.getAppData=function(e,t,r,o,i,s){void 0===r&&(r=!1),void 0===o&&(o=null),void 0===i&&(i=null),void 0===s&&(s=null),this._isWaitingForAppData=!0;var u={context:p.SLTContext.NORMAL,clientKey:this._clientKey,devMode:this._devMode,ping:r,socialId:this._socialId,basicProperties:o,customProperties:i};if(null!=s)for(var c in s)s.hasOwnProperty(c)&&(u[c]=s[c]);a.SLTApiCallFactory.getCall(a.SLTApiCallFactory.API_CALL_APP_DATA,this._appData).call(u,e,t,this._dropTimeout),n.SLTLogger.getInstance().log("New app data requested.")},e.prototype.ping=function(e,t){void 0===e&&(e=null),void 0===t&&(t=null),this.canGetAppData()&&(this._connectSuccessCallback=e,this._connectFailCallback=t,this.getAppData(this.appDataConnectSuccessHandler,this.appDataConnectFailHandler,!0,this._basicProperties,this._customProperties))},e.prototype.appDataConnectSuccessHandler=function(e){this._appData=e,this._isWaitingForAppData=!1,this._connectSuccessCallback(),this._heartBeatTimerStarted||this.startHeartbeat()},e.prototype.appDataConnectFailHandler=function(e){n.SLTLogger.getInstance().log("New app data request from connect() failed. StatusCode: "+e.statusCode),this._isWaitingForAppData=!1,"API_ERROR"==e.statusCode?this._connectFailCallback(new u.SLTStatusAppDataLoadFail):this._connectFailCallback(e)},e}();t.SLTSaltr=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(63);t.SLTSaltr=n.SLTSaltr}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,